services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: litellm-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=litellm
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - postgres-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d litellm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: litellm-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass "sk-1234" --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=sk-1234
    volumes:
      - redis_data:/data
    networks:
      - postgres-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  # Jaeger - All-in-one (includes UI, collector, query)
  # Only expose UI and native Jaeger ports, NOT OTLP ports
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: litellm-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger collector HTTP
      - "14250:14250" # Jaeger collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    networks:
      - postgres-network
    restart: unless-stopped

  # OTEL Collector - receives traces from LiteLLM and forwards to Jaeger
  # Exposed on host ports 4317/4318 for LiteLLM to send to
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: litellm-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC - exposed to host for LiteLLM
      - "4318:4318" # OTLP HTTP - exposed to host for LiteLLM
      - "8889:8889" # Prometheus metrics
    networks:
      - postgres-network
    depends_on:
      - jaeger
    restart: unless-stopped

networks:
  postgres-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
